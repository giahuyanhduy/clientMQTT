#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
MQTT Client cho Fuel Station Management System
Thay th·∫ø HTTP requests b·∫±ng MQTT communication
"""

import paho.mqtt.client as mqtt
import json
import time
import os
import subprocess
import re
import random
import logging
from datetime import datetime, timedelta
from threading import Thread
import requests

# ==================== C·∫§U H√åNH LOGGING CHI TI·∫æT ====================
def setup_logging():
    """Thi·∫øt l·∫≠p h·ªá th·ªëng logging chi ti·∫øt"""
    # T·∫°o th∆∞ m·ª•c log trong th∆∞ m·ª•c hi·ªán t·∫°i ho·∫∑c /opt/fuel-client-mqtt/logs
    if os.path.exists("/opt/fuel-client-mqtt"):
        log_dir = "/opt/fuel-client-mqtt/logs"
    else:
        log_dir = "./logs"
    
    os.makedirs(log_dir, exist_ok=True)
    
    # C·∫•u h√¨nh logging ch√≠nh
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler(f'{log_dir}/client_mqtt.log', encoding='utf-8'),
            logging.StreamHandler()
        ]
    )
    
    return logging.getLogger(__name__)

# Kh·ªüi t·∫°o logging
logger = setup_logging()

# ==================== C·∫§U H√åNH MQTT ====================
MQTT_BROKER_HOST = "103.77.166.69"  # K·∫øt n·ªëi v·ªÅ server, kh√¥ng ph·∫£i localhost
MQTT_BROKER_PORT = 1883
MQTT_KEEPALIVE = 60
MQTT_QOS = 1

# Topics MQTT
TOPICS = {
    'station_data': 'fuel_station/data',
    'station_status': 'fuel_station/status',
    'station_command': 'fuel_station/command',
    'station_response': 'fuel_station/response',
    'station_warning': 'fuel_station/warning',
    'station_heartbeat': 'fuel_station/heartbeat'
}

# ==================== MQTT CLIENT CLASS ====================
class MQTTFuelStationClient:
    def __init__(self):
        self.client = mqtt.Client()
        self.client.on_connect = self.on_connect
        self.client.on_message = self.on_message
        self.client.on_disconnect = self.on_disconnect
        self.client.on_log = self.on_log
        self.connected = False
        self.port = None
        self.version = None
        self.mac = None
        self.mabom_history = {}
        self.connection_status = {}
        self.is_all_disconnect_restart = [False]
        self.last_restart_all = None
        self.last_non_sequential_restart = None
        
    def on_connect(self, client, userdata, flags, rc):
        """Callback khi k·∫øt n·ªëi MQTT"""
        if rc == 0:
            self.connected = True
            logger.info("‚úÖ K·∫øt n·ªëi MQTT th√†nh c√¥ng")
            
            # Subscribe c√°c topics c·∫ßn thi·∫øt
            self.client.subscribe(f"{TOPICS['station_command']}/{self.port}", qos=MQTT_QOS)
            self.client.subscribe(f"{TOPICS['station_command']}/all", qos=MQTT_QOS)
            logger.info(f"üì° ƒê√£ subscribe command topics cho port {self.port}")
            
        else:
            logger.error(f"‚ùå L·ªói k·∫øt n·ªëi MQTT: {rc}")
            
    def on_disconnect(self, client, userdata, rc):
        """Callback khi m·∫•t k·∫øt n·ªëi MQTT"""
        self.connected = False
        logger.warning(f"‚ö†Ô∏è M·∫•t k·∫øt n·ªëi MQTT: {rc}")
        
    def on_log(self, client, userdata, level, buf):
        """Callback cho log MQTT"""
        logger.debug(f"MQTT Log: {buf}")
        
    def on_message(self, client, userdata, msg):
        """Callback khi nh·∫≠n message MQTT"""
        try:
            topic = msg.topic
            payload = json.loads(msg.payload.decode('utf-8'))
            
            logger.info(f"üì® Nh·∫≠n message t·ª´ {topic}")
            
            if topic.startswith(TOPICS['station_command']):
                self.handle_command(payload)
                
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå L·ªói parse JSON t·ª´ MQTT: {e}")
        except Exception as e:
            logger.error(f"‚ùå L·ªói x·ª≠ l√Ω message MQTT: {e}")
            
    def handle_command(self, command_data):
        """X·ª≠ l√Ω l·ªánh t·ª´ server"""
        try:
            command = command_data.get('command')
            port = command_data.get('port')
            data = command_data.get('data', {})
            
            logger.info(f"üìã Nh·∫≠n l·ªánh: {command} cho port {port}")
            
            if command == 'restart':
                self.handle_restart_command()
            elif command == 'ssh':
                self.handle_ssh_command(data.get('command', ''))
            elif command == 'getdata':
                self.handle_getdata_command(data.get('getdata', 'Off'))
            elif command == 'laymabom':
                self.handle_laymabom_command(data.get('pump_id', ''))
                
        except Exception as e:
            logger.error(f"‚ùå L·ªói x·ª≠ l√Ω l·ªánh: {e}")
            
    def handle_restart_command(self):
        """X·ª≠ l√Ω l·ªánh restart"""
        try:
            logger.info("üîÑ Nh·∫≠n l·ªánh restart, ƒëang kh·ªüi ƒë·ªông l·∫°i h·ªá th·ªëng...")
            subprocess.run(['reboot', 'now'], check=True)
        except subprocess.CalledProcessError as e:
            logger.error(f"‚ùå L·ªói th·ª±c thi l·ªánh restart: {e}")
        except Exception as e:
            logger.error(f"‚ùå L·ªói kh√¥ng mong mu·ªën khi restart: {e}")
            
    def handle_ssh_command(self, ssh_command):
        """X·ª≠ l√Ω l·ªánh SSH"""
        try:
            logger.info(f"üíª Nh·∫≠n l·ªánh SSH: {ssh_command}")
            subprocess.Popen(ssh_command, shell=True)
            logger.info(f"‚úÖ ƒê√£ b·∫Øt ƒë·∫ßu th·ª±c thi l·ªánh: {ssh_command}")
        except Exception as e:
            logger.error(f"‚ùå L·ªói th·ª±c thi l·ªánh SSH: {e}")
            
    def handle_getdata_command(self, getdata_status):
        """X·ª≠ l√Ω l·ªánh getdata"""
        try:
            logger.info(f"üìä Nh·∫≠n l·ªánh getdata: {getdata_status}")
            
            # C·∫≠p nh·∫≠t tr·∫°ng th√°i g·ª≠i d·ªØ li·ªáu
            if getdata_status.lower() == 'on':
                self.getdata_enabled = True
                logger.info("‚úÖ B·∫≠t ch·∫ø ƒë·ªô g·ª≠i d·ªØ li·ªáu")
            else:
                self.getdata_enabled = False
                logger.info("‚è∏Ô∏è T·∫Øt ch·∫ø ƒë·ªô g·ª≠i d·ªØ li·ªáu, ch·ªâ g·ª≠i heartbeat")
                
        except Exception as e:
            logger.error(f"‚ùå L·ªói x·ª≠ l√Ω l·ªánh getdata: {e}")
            
    def handle_laymabom_command(self, pump_id):
        """X·ª≠ l√Ω l·ªánh laymabom"""
        try:
            logger.info(f"üî¢ Nh·∫≠n l·ªánh laymabom cho pump: {pump_id}")
            # G·ªçi API daylaidulieu
            self.call_daylaidulieu_api(pump_id)
        except Exception as e:
            logger.error(f"‚ùå L·ªói x·ª≠ l√Ω l·ªánh laymabom: {e}")
            
    def connect(self):
        """K·∫øt n·ªëi ƒë·∫øn MQTT broker"""
        try:
            logger.info(f"üîå ƒêang k·∫øt n·ªëi ƒë·∫øn MQTT broker {MQTT_BROKER_HOST}:{MQTT_BROKER_PORT}")
            self.client.connect(MQTT_BROKER_HOST, MQTT_BROKER_PORT, MQTT_KEEPALIVE)
            self.client.loop_start()
            return True
        except Exception as e:
            logger.error(f"‚ùå L·ªói k·∫øt n·ªëi MQTT: {e}")
            return False
            
    def disconnect(self):
        """Ng·∫Øt k·∫øt n·ªëi MQTT"""
        try:
            self.client.loop_stop()
            self.client.disconnect()
            logger.info("üîå ƒê√£ ng·∫Øt k·∫øt n·ªëi MQTT")
        except Exception as e:
            logger.error(f"‚ùå L·ªói ng·∫Øt k·∫øt n·ªëi MQTT: {e}")
            
    def publish_data(self, data):
        """G·ª≠i d·ªØ li·ªáu tr·∫°m qua MQTT"""
        try:
            message = {
                'port': self.port,
                'version': self.version,
                'mac': self.mac,
                'timestamp': datetime.now().isoformat(),
                'data': data
            }
            
            self.client.publish(TOPICS['station_data'], json.dumps(message), qos=MQTT_QOS)
            logger.debug(f"üì§ ƒê√£ g·ª≠i d·ªØ li·ªáu tr·∫°m qua MQTT")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå L·ªói g·ª≠i d·ªØ li·ªáu MQTT: {e}")
            return False
            
    def publish_status(self, status):
        """G·ª≠i tr·∫°ng th√°i tr·∫°m qua MQTT"""
        try:
            message = {
                'port': self.port,
                'status': status,
                'timestamp': datetime.now().isoformat()
            }
            
            self.client.publish(TOPICS['station_status'], json.dumps(message), qos=MQTT_QOS)
            logger.debug(f"üì§ ƒê√£ g·ª≠i tr·∫°ng th√°i tr·∫°m qua MQTT")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå L·ªói g·ª≠i tr·∫°ng th√°i MQTT: {e}")
            return False
            
    def publish_warning(self, warning_type, pump_id, mabom=None):
        """G·ª≠i c·∫£nh b√°o qua MQTT"""
        try:
            message = {
                'port': self.port,
                'warning_type': warning_type,
                'pump_id': pump_id,
                'mabom': mabom,
                'timestamp': datetime.now().isoformat()
            }
            
            self.client.publish(TOPICS['station_warning'], json.dumps(message), qos=MQTT_QOS)
            logger.warning(f"‚ö†Ô∏è ƒê√£ g·ª≠i c·∫£nh b√°o {warning_type} qua MQTT")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå L·ªói g·ª≠i c·∫£nh b√°o MQTT: {e}")
            return False
            
    def publish_heartbeat(self, include_info=False):
        """G·ª≠i heartbeat qua MQTT"""
        try:
            message = {
                'port': self.port
            }
            
            # Ch·ªâ g·ª≠i th√¥ng tin ƒë·∫ßy ƒë·ªß khi c·∫ßn thi·∫øt (l·∫ßn ƒë·∫ßu ho·∫∑c khi ƒë∆∞·ª£c y√™u c·∫ßu)
            if include_info:
                message.update({
                    'version': self.version,
                    'mac': self.mac
                })
            
            self.client.publish(TOPICS['station_heartbeat'], json.dumps(message), qos=MQTT_QOS)
            logger.debug(f"üíì ƒê√£ g·ª≠i heartbeat qua MQTT")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå L·ªói g·ª≠i heartbeat MQTT: {e}")
            return False

# ==================== HELPER FUNCTIONS ====================
def get_cpu_arch():
    """L·∫•y ki·∫øn tr√∫c CPU"""
    try:
        arch = subprocess.check_output(['uname', '-m']).decode().strip()
        if 'arm' in arch.lower() or 'aarch64' in arch.lower():
            return 'ARM'
        elif 'x86' in arch.lower() or 'i686' in arch.lower():
            return 'X86'
        else:
            return 'Unknown'
    except subprocess.CalledProcessError as e:
        logger.error(f"L·ªói khi l·∫•y ki·∫øn tr√∫c CPU: {e}")
        return 'Unknown'
    except Exception as e:
        logger.error(f"L·ªói kh√¥ng mong mu·ªën khi l·∫•y ki·∫øn tr√∫c CPU: {e}")
        return 'Unknown'

def get_version_from_js():
    """L·∫•y version t·ª´ file JavaScript"""
    possible_paths = [
        '/home/Phase_3/GasController.js',
        '/home/giang/Phase_3/GasController.js'
    ]

    has_ips = False
    has_fuelmet = False
    try:
        with open('/opt/autorun', 'r') as file:
            content = file.read()
            if './ips' in content:
                has_ips = True
            if 'fuelmet' in content:
                has_fuelmet = True
    except Exception as e:
        logger.error(f"L·ªói khi ƒë·ªçc file /opt/autorun: {e}")

    cpu_arch = get_cpu_arch()
    for path in possible_paths:
        if os.path.exists(path):
            with open(path, 'r') as file:
                content = file.read()
                match = re.search(r'const\s+ver\s*=\s*"([^"]+)"', content)
                if match:
                    version = match.group(1)
                    version = f"{cpu_arch}-{version}"
                    if has_ips and has_fuelmet:
                        return version + "-IPS-Fuelmet"
                    elif has_ips:
                        return version + "-IPS"
                    elif has_fuelmet:
                        return version + "-Fuelmet"
                    return version
    
    version = f"{cpu_arch}-1.0"
    if has_ips and has_fuelmet:
        return version + "-IPS-Fuelmet"
    elif has_ips:
        return version + "-IPS"
    elif has_fuelmet:
        return version + "-Fuelmet"
    return version

def get_port_from_file():
    """L·∫•y port t·ª´ file autorun"""
    try:
        with open('/opt/autorun', 'r') as file:
            content = file.read()
            match = re.search(r'(\s\d{4}|\d{5}):localhost:22', content)
            if match:
                port = match.group(1).strip()
                return port
            else:
                logger.error("Kh√¥ng t√¨m th·∫•y port trong file.")
                return None
    except Exception as e:
        logger.error(f"L·ªói khi ƒë·ªçc port t·ª´ file: {e}")
        return None

def get_mac():
    """L·∫•y ƒë·ªãa ch·ªâ MAC"""
    try:
        interface_cmd = "ip route get 1.1.1.1 | grep -oP 'dev \\K\\w+'"
        interface = subprocess.check_output(interface_cmd, shell=True).decode().strip()
        result = subprocess.check_output(f"ip link show {interface}", shell=True).decode()
        mac_match = re.search(r"ether ([\da-fA-F:]+)", result)
        if mac_match:
            return mac_match.group(1)
    except subprocess.CalledProcessError as e:
        logger.error(f"L·ªói khi ch·∫°y l·ªánh ip link: {e}")
    except Exception as e:
        logger.error(f"L·ªói l·∫•y MAC Address: {e}")
    return "00:00:00:00:00:00"

def get_data_from_url(url):
    """L·∫•y d·ªØ li·ªáu t·ª´ URL (fallback cho HTTP)"""
    try:
        response = requests.get(url, timeout=10)
        if response.status_code == 200:
            return response.json()
        else:
            logger.error(f"M√£ tr·∫°ng th√°i kh√¥ng ph·∫£i 200: {response.status_code}")
            return None
    except requests.exceptions.RequestException as e:
        logger.error(f"L·ªói khi l·∫•y d·ªØ li·ªáu t·ª´ URL: {e}")
        return None

def call_daylaidulieu_api(pump_id):
    """G·ªçi API daylaidulieu"""
    api_url = f"http://localhost:6969/daylaidulieu/{pump_id}"
    try:
        response = requests.get(api_url, timeout=10)
        logger.info(f"ƒê√£ g·ªçi API daylaidulieu cho pump ID {pump_id}. M√£ tr·∫°ng th√°i: {response.status_code}")
    except requests.exceptions.RequestException as e:
        logger.error(f"L·ªói khi g·ªçi API daylaidulieu: {e}")

def check_disk_and_clear_logs(threshold=85):
    """Ki·ªÉm tra dung l∆∞·ª£ng ·ªï c·ª©ng v√† x√≥a log n·∫øu c·∫ßn"""
    try:
        output = subprocess.check_output(['df', '-h', '/'], stderr=subprocess.STDOUT).decode()
        lines = output.splitlines()
        for line in lines:
            if line.strip().endswith(' /'):
                parts = line.split()
                if len(parts) >= 5:
                    usage_str = parts[4].replace('%', '')
                    disk_usage_percent = float(usage_str)
                    logger.info(f"M·ª©c s·ª≠ d·ª•ng ·ªï c·ª©ng hi·ªán t·∫°i: {disk_usage_percent:.2f}%")
                    
                    if disk_usage_percent > threshold:
                        logger.warning(f"·ªî c·ª©ng s·ª≠ d·ª•ng v∆∞·ª£t qu√° {threshold}%. Ti·∫øn h√†nh x√≥a c√°c file log...")
                        try:
                            # X√≥a file log (t√≠nh nƒÉng gi·∫£i ph√≥ng dung l∆∞·ª£ng)
                            subprocess.run("find / -type f -name '*.log' -execdir rm -- '{}' +", shell=True, check=True)
                            logger.info("ƒê√£ x√≥a c√°c file log trong to√†n b·ªô h·ªá th·ªëng")
                        except subprocess.CalledProcessError as e:
                            logger.error(f"L·ªói khi x√≥a file log: {e}")
                    else:
                        logger.info(f"·ªî c·ª©ng s·ª≠ d·ª•ng d∆∞·ªõi ng∆∞·ª°ng {threshold}%, kh√¥ng c·∫ßn x√≥a file log.")
                break
    except subprocess.CalledProcessError as e:
        logger.error(f"L·ªói khi ch·∫°y l·ªánh df: {e}")
    except Exception as e:
        logger.error(f"L·ªói khi ki·ªÉm tra ·ªï c·ª©ng: {e}")

# ==================== MAIN CLIENT CLASS ====================
class FuelStationClient:
    def __init__(self):
        self.mqtt_client = MQTTFuelStationClient()
        self.port = None
        self.version = None
        self.mac = None
        self.mabom_history = {}
        self.connection_status = {}
        self.is_all_disconnect_restart = [False]
        self.last_restart_all = None
        self.last_non_sequential_restart = None
        self.getdata_enabled = False  # M·∫∑c ƒë·ªãnh t·∫Øt g·ª≠i d·ªØ li·ªáu
        self.info_sent = False  # ƒê√°nh d·∫•u ƒë√£ g·ª≠i th√¥ng tin ch∆∞a
        
    def initialize(self):
        """Kh·ªüi t·∫°o client"""
        try:
            # L·∫•y th√¥ng tin c∆° b·∫£n
            self.port = get_port_from_file()
            if not self.port:
                logger.error("Kh√¥ng t√¨m th·∫•y port. Tho√°t.")
                return False
                
            self.mac = get_mac()
            if not self.mac:
                logger.error("Kh√¥ng t√¨m th·∫•y MAC. Tho√°t.")
                return False
                
            self.version = get_version_from_js()
            
            # Thi·∫øt l·∫≠p MQTT client
            self.mqtt_client.port = self.port
            self.mqtt_client.version = self.version
            self.mqtt_client.mac = self.mac
            
            logger.info(f"S·ª≠ d·ª•ng port: {self.port}")
            logger.info(f"S·ª≠ d·ª•ng MAC: {self.mac}")
            logger.info(f"S·ª≠ d·ª•ng version: {self.version}")
            
            return True
            
        except Exception as e:
            logger.error(f"L·ªói kh·ªüi t·∫°o client: {e}")
            return False
            
    def connect(self):
        """K·∫øt n·ªëi MQTT"""
        return self.mqtt_client.connect()
        
    def disconnect(self):
        """Ng·∫Øt k·∫øt n·ªëi MQTT"""
        self.mqtt_client.disconnect()
        
    def send_data_continuously(self):
        """G·ª≠i heartbeat li√™n t·ª•c v√† d·ªØ li·ªáu khi c·∫ßn thi·∫øt"""
        while True:
            try:
                # G·ª≠i heartbeat v·ªõi th√¥ng tin ƒë·∫ßy ƒë·ªß l·∫ßn ƒë·∫ßu, sau ƒë√≥ ch·ªâ g·ª≠i heartbeat ƒë∆°n gi·∫£n
                if not self.info_sent:
                    self.mqtt_client.publish_heartbeat(include_info=True)
                    self.info_sent = True
                    logger.info("üìã ƒê√£ g·ª≠i th√¥ng tin ƒë·∫ßy ƒë·ªß l·∫ßn ƒë·∫ßu")
                else:
                    self.mqtt_client.publish_heartbeat(include_info=False)
                    logger.debug("üíì ƒê√£ g·ª≠i heartbeat ƒë∆°n gi·∫£n")
                
                # Ch·ªâ g·ª≠i d·ªØ li·ªáu khi getdata_enabled = True
                if self.getdata_enabled:
                    data_from_url = get_data_from_url("http://localhost:6969/GetfullupdateArr")
                    if data_from_url:
                        # G·ª≠i d·ªØ li·ªáu qua MQTT
                        self.mqtt_client.publish_data(data_from_url)
                        logger.info("üìä ƒê√£ g·ª≠i d·ªØ li·ªáu t·ªõi MQTT broker")
                    else:
                        logger.warning("‚ö†Ô∏è Kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu t·ª´ URL")
                else:
                    logger.debug("‚è∏Ô∏è Ch·∫ø ƒë·ªô g·ª≠i d·ªØ li·ªáu t·∫Øt, ch·ªâ g·ª≠i heartbeat")
                
            except Exception as e:
                logger.error(f"‚ùå L·ªói trong v√≤ng l·∫∑p g·ª≠i d·ªØ li·ªáu: {e}")
                
                # Sleep c·ªë ƒë·ªãnh cho heartbeat
                time.sleep(10)  # G·ª≠i heartbeat m·ªói 10 gi√¢y
            
    def check_mabom_continuously(self):
        """Ki·ªÉm tra m√£ b∆°m li√™n t·ª•c"""
        while True:
            try:
                data_from_url = get_data_from_url("http://localhost:6969/GetfullupdateArr")
                if data_from_url:
                    self.check_mabom(data_from_url)
                else:
                    logger.warning("Kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu ƒë·ªÉ ki·ªÉm tra m√£ b∆°m")
            except Exception as e:
                logger.error(f"L·ªói trong v√≤ng l·∫∑p ki·ªÉm tra m√£ b∆°m: {e}")
                
            time.sleep(2)
            
    def check_mabom(self, data):
        """Ki·ªÉm tra m√£ b∆°m (gi·ªØ nguy√™n logic c≈©)"""
        current_time = datetime.now()
        all_disconnected = True

        try:
            for item in data:
                idcot = item.get('id')
                pump = item.get('pump')
                statusnow = item.get('status')
                mabom_moinhat = item.get('MaBomMoiNhat', {}).get('pump')

                if idcot is None or pump is None:
                    continue

                pump_id = str(idcot)
                mabomtiep = pump
                is_disconnected = item.get('isDisconnected', False)

                if not is_disconnected:
                    all_disconnected = False

                if pump_id not in self.connection_status:
                    self.connection_status[pump_id] = {
                        'is_disconnected': is_disconnected,
                        'disconnect_time': current_time if is_disconnected else None,
                        'alert_sent': False,
                        'last_alerted_mabom': None,
                        'mismatch_count': 0,
                        'restart_done': False
                    }
                else:
                    if is_disconnected:
                        if not self.connection_status[pump_id]['is_disconnected']:
                            self.connection_status[pump_id]['is_disconnected'] = True
                            self.connection_status[pump_id]['disconnect_time'] = current_time
                            self.connection_status[pump_id]['alert_sent'] = False
                            self.connection_status[pump_id]['restart_done'] = False
                        else:
                            if current_time - self.connection_status[pump_id]['disconnect_time'] > timedelta(seconds=65):
                                if not self.connection_status[pump_id]['alert_sent']:
                                    logger.warning(f"Pump ID {pump_id} m·∫•t k·∫øt n·ªëi qu√° 65 gi√¢y.")
                                    self.mqtt_client.publish_warning("disconnection", pump_id, mabomtiep)
                                    self.connection_status[pump_id]['alert_sent'] = True
                    else:
                        if self.connection_status[pump_id]['is_disconnected']:
                            if current_time - self.connection_status[pump_id]['disconnect_time'] <= timedelta(seconds=65):
                                logger.info(f"Pump ID {pump_id} ƒë√£ k·∫øt n·ªëi l·∫°i trong v√≤ng 65 gi√¢y.")
                            self.connection_status[pump_id] = {
                                'is_disconnected': False,
                                'disconnect_time': None,
                                'alert_sent': False,
                                'last_alerted_mabom': self.connection_status[pump_id].get('last_alerted_mabom'),
                                'mismatch_count': self.connection_status[pump_id].get('mismatch_count', 0),
                                'restart_done': self.connection_status[pump_id].get('restart_done', False)
                            }

                if pump_id not in self.mabom_history:
                    self.mabom_history[pump_id] = []

                if self.mabom_history[pump_id] and isinstance(self.mabom_history[pump_id][-1], tuple) and self.mabom_history[pump_id][-1][0] == mabomtiep:
                    continue
                else:
                    self.mabom_history[pump_id].append((mabomtiep, current_time.strftime('%Y-%m-%d %H:%M:%S')))
                    if len(self.mabom_history[pump_id]) > 10:
                        self.mabom_history[pump_id].pop(0)

                mabom_entries = [entry for entry in self.mabom_history[pump_id] if isinstance(entry, tuple)]

                if statusnow == 's·∫µn s√†ng':
                    if mabom_moinhat and mabom_moinhat != pump:
                        self.connection_status[pump_id]['mismatch_count'] += 1
                        logger.warning(f"M√£ b∆°m kh√¥ng kh·ªõp l·∫ßn {self.connection_status[pump_id]['mismatch_count']} cho pump ID {pump_id}: {mabom_moinhat} != {pump}")

                        if self.connection_status[pump_id]['mismatch_count'] == 3:
                            if self.last_non_sequential_restart is None or (current_time - self.last_non_sequential_restart) > timedelta(minutes=10):
                                logger.warning(f"Pump ID {pump_id} c√≥ m√£ b∆°m kh√¥ng kh·ªõp 3 l·∫ßn. Th·ª±c hi·ªán restartall.")
                                subprocess.run(['forever', 'restartall'])
                                self.last_non_sequential_restart = current_time
                                time.sleep(3)
                                call_daylaidulieu_api(pump_id)
                                self.mqtt_client.publish_warning("nonsequential", pump_id, mabomtiep)
                                self.connection_status[pump_id]['mismatch_count'] = 0
                            else:
                                logger.info("Ph√°t hi·ªán m√£ b∆°m kh√¥ng li√™n ti·∫øp, nh∆∞ng ƒë√£ restartall g·∫ßn ƒë√¢y. ƒê·ª£i 10 ph√∫t.")
                    else:
                        self.connection_status[pump_id]['mismatch_count'] = 0

                    if len(mabom_entries) > 1:
                        previous_mabom = mabom_entries[-2][0]
                        if isinstance(mabomtiep, int) and isinstance(previous_mabom, int):
                            if mabomtiep != previous_mabom + 1:
                                if self.connection_status[pump_id]['last_alerted_mabom'] != mabomtiep:
                                    logger.warning(f"L·ªói m√£ b∆°m kh√¥ng li√™n ti·∫øp: V√≤i b∆°m {pump_id} c·ªßa port {self.port}.")
                                    self.mqtt_client.publish_warning("nonsequential", pump_id, mabomtiep)
                                    call_daylaidulieu_api(pump_id)
                                    self.mabom_history[pump_id].append({
                                        'type': 'nonsequential',
                                        'time': current_time.strftime('%Y-%m-%d %H:%M:%S')
                                    })
                                    self.connection_status[pump_id]['last_alerted_mabom'] = mabomtiep
                            else:
                                self.mabom_history[pump_id] = [entry for entry in self.mabom_history[pump_id] if not (isinstance(entry, dict) and entry.get('type') == 'nonsequential')]

            if all_disconnected and not any(conn['restart_done'] for conn in self.connection_status.values()) and not self.is_all_disconnect_restart[0]:
                if self.last_restart_all is None or (current_time - self.last_restart_all) > timedelta(minutes=10):
                    logger.warning("T·∫•t c·∫£ c√°c v√≤i ƒë·ªÅu m·∫•t k·∫øt n·ªëi. Th·ª±c hi·ªán restartall.")
                    subprocess.run(['forever', 'restartall'])
                    self.last_restart_all = current_time
                    for conn in self.connection_status.values():
                        conn['restart_done'] = True
                    self.mqtt_client.publish_warning("all_disconnection", "all", "T·∫•t c·∫£ c√°c v√≤i ƒë·ªÅu m·∫•t k·∫øt n·ªëi.")
                    self.is_all_disconnect_restart[0] = True
                else:
                    logger.info("T·∫•t c·∫£ c√°c v√≤i m·∫•t k·∫øt n·ªëi, nh∆∞ng ƒë√£ restartall g·∫ßn ƒë√¢y. ƒê·ª£i 10 ph√∫t.")
            
            if not all_disconnected:
                self.is_all_disconnect_restart[0] = False

        except Exception as e:
            logger.error(f"L·ªói trong check_mabom: {e}")

# ==================== MAIN FUNCTION ====================
def main():
    """H√†m ch√≠nh kh·ªüi ƒë·ªông client"""
    try:
        logger.info("üöÄ Kh·ªüi ƒë·ªông MQTT Fuel Station Client")
        
        # Ki·ªÉm tra dung l∆∞·ª£ng ·ªï c·ª©ng
        check_disk_and_clear_logs()
        
        # Kh·ªüi t·∫°o client
        client = FuelStationClient()
        if not client.initialize():
            logger.error("‚ùå Kh√¥ng th·ªÉ kh·ªüi t·∫°o client")
            return
            
        # K·∫øt n·ªëi MQTT
        if not client.connect():
            logger.error("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi MQTT")
            return
            
        # Kh·ªüi ƒë·ªông c√°c thread
        data_thread = Thread(target=client.send_data_continuously, daemon=True)
        mabom_thread = Thread(target=client.check_mabom_continuously, daemon=True)
        
        data_thread.start()
        mabom_thread.start()
        
        logger.info("‚úÖ Client ƒë√£ kh·ªüi ƒë·ªông th√†nh c√¥ng")
        
        # Gi·ªØ ch∆∞∆°ng tr√¨nh ch·∫°y
        try:
            while True:
                time.sleep(1)
        except KeyboardInterrupt:
            logger.info("‚èπÔ∏è Nh·∫≠n t√≠n hi·ªáu d·ª´ng, ƒëang t·∫Øt client...")
            
    except Exception as e:
        logger.error(f"‚ùå L·ªói kh·ªüi ƒë·ªông client: {e}")
    finally:
        # D·ªçn d·∫πp
        if 'client' in locals():
            client.disconnect()
        logger.info("‚úÖ Client ƒë√£ ƒë∆∞·ª£c t·∫Øt")

if __name__ == "__main__":
    main()
